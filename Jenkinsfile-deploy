pipeline{
   agent { node { label 'master' } }
   parameters {
       string(name: 'processInstanceId', defaultValue: '', description: 'Camunda Process Instance ID')
   } // End parameters
    stages {
        stage('Preparation') {
            steps {
                library identifier: "my-jenkins-deploy@${env.GIT_BRANCH}",
                        retriever: legacySCM([$class: 'GitSCM',
                                              branches: [[name: "${env.GIT_BRANCH}"]],
                                              userRemoteConfigs: [[url: "${env.GIT_URL}"]]
                                             ])
                script {
                    echo("Camunda Process Instance: ${processInstanceId}")
                    currentBuild.description =  "${processInstanceId}"
                } // End script
            } // End steps
        } // End stage
        stage('Create RFC') {steps {script {echo("Running simulation...")}}}
        stage ('Deploy Phase 1'){
            parallel {
                stage ('Keystores'){
                    steps {
                        script {
                            echo("Running simulation...")
                            //throw new Exception("pipeline failure")
                        }
                    }
                }
                stage ('Aliases'){steps {script {echo("Running simulation...");sleep(5)}}}
                stage ('Caches'){steps {script {echo("Running simulation...")}}}
                stage ('Kvms'){steps {script {echo("Running simulation...")}}}
                stage ('Shared Flow'){steps {script {echo("Running simulation...")}}}
                stage ('Target Servers'){steps {script {echo("Running simulation...")}}}
            } // end parallel
        } // end stage
        stage ('Deploy Phase 2'){
            parallel {
                stage ('References'){steps {script {echo("Running simulation...")}}}
                stage ('Proxy'){steps {script {echo("Running simulation...");sleep(5)}}}
            } // end parallel
        } // end stage
        stage ('Deploy Phase 3'){
            parallel {
                stage ('Developers'){steps {script {echo("Running simulation...");sleep(5)}}}
                stage ('Flow Hooks'){steps {script {echo("Running simulation...")}}}
                stage ('Products'){steps {script {echo("Running simulation...")}}}
            } // end parallel
        } // end stage
        stage ('Deploy Phase 4'){
            parallel {
                stage ('Apps'){steps {script {echo("Running simulation...");sleep(5)}}}
            } // end parallel
        } // end stage
    } // End stages
    post {
        // Sequence of execution: always, changed, fixed, regression, aborted, failure, success, unstable, unsuccessful, and cleanup
        always {
            script{
                echo ''
            }
        }
        success {
            script {
                workflow.deploymentComplete(deploymentStatus: "success", processInstanceId: "${processInstanceId}")
            } // End script
        } // End failure
        failure {
            script {
                workflow.deploymentComplete(deploymentStatus: "failed", processInstanceId: "${processInstanceId}")
            } // End script
        } // End success
        cleanup {
            script {
                currentBuild.displayName = "#${env.BUILD_NUMBER}"
                currentBuild.description =  "[${currentBuild.currentResult}] ${processInstanceId}"
                deleteDir()
            }
        }// Clean workspace
     } // End post
} // End pipeline
