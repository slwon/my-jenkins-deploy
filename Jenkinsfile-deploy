pipeline{
   agent { node { label 'master' } }
   parameters {
       string(name: 'WF_PROCESS_INSTANCE_ID', defaultValue: '', description: 'Camunda Process Instance ID')
   } // End parameters
    stages {
        stage('Preparation') {
            steps {
                library identifier: "my-jenkins-deploy@${env.GIT_BRANCH}",
                        retriever: legacySCM([$class: 'GitSCM',
                                              branches: [[name: "${env.GIT_BRANCH}"]],
                                              // userRemoteConfigs: [[credentialsId: 'jenkins-git-pac', url: "${env.GIT_URL}"]]
                                              userRemoteConfigs: [[url: "${env.GIT_URL}"]]
                                             ])
                script {
                    echo("Camunda Process Instance: $WF_PROCESS_INSTANCE_ID")
                    currentBuild.description =  "${WF_PROCESS_INSTANCE_ID}"
                } // End script
            } // End steps
        } // End stage
        stage('Create RFC') {steps {script {echo("dummy stage")}}}
        stage ('Deploy Phase 1'){
            parallel {
                stage ('Keystores'){
                    steps {
                        script {
                            echo("dummy stage")
                            // throw new Exception("Simulate pipeline failure")
                        }
                    }
                }
                stage ('Aliases'){steps {script {echo("dummy stage");sleep(5)}}}
                stage ('Caches'){steps {script {echo("dummy stage")}}}
                stage ('Kvms'){steps {script {echo("dummy stage")}}}
                stage ('Shared Flow'){steps {script {echo("dummy stage")}}}
                stage ('Target Servers'){steps {script {echo("dummy stage")}}}
            } // end parallel
        } // end stage
        stage ('Deploy Phase 2'){
            parallel {
                stage ('References'){steps {script {echo("dummy stage")}}}
                stage ('Proxy'){steps {script {echo("dummy stage");sleep(5)}}}
            } // end parallel
        } // end stage
        stage ('Deploy Phase 3'){
            parallel {
                stage ('Developers'){steps {script {echo("dummy stage");sleep(5)}}}
                stage ('Flow Hooks'){steps {script {echo("dummy stage")}}}
                stage ('Products'){steps {script {echo("dummy stage")}}}
            } // end parallel
        } // end stage
        stage ('Deploy Phase 4'){
            parallel {
                stage ('Apps'){steps {script {echo("dummy stage");sleep(5)}}}
            } // end parallel
        } // end stage
    } // End stages
    post {
        // Sequence of execution: always, changed, fixed, regression, aborted, failure, success, unstable, unsuccessful, and cleanup
        always {
            script{
                def requestBody = """\
                                      {
                                        "messageName": "deploymentComplete",
                                        "processInstanceId": "${WF_PROCESS_INSTANCE_ID}",
                                        "resultEnabled": true,
                                        "processVariables" : {
                                            "deploymentStatus" : {"value" : "${currentBuild.currentResult}", "type": "String"}
                                         }
                                      }""".stripIndent()
                echo "Sending Message Event to Workflow Engine\n Request:\n ${requestBody}"
                def WORKFLOW_HOST = 'https://34.78.150.62:8443'
                def response =  httpRequest authentication: 'jenkins-camunda',
                                httpMode: 'POST',
                                url: "${WORKFLOW_HOST}/engine-rest/message",
                                ignoreSslErrors: true,
                                contentType: "APPLICATION_JSON",
                                requestBody: "${requestBody}",
                                responseHandle: 'NONE',
                                validResponseCodes : '200,204',
                                consoleLogResponseBody: true
            }
        }
        failure {
            script {
                echo("Fail")
            } // End script
        } // End failure
        success {
            script {
                echo("Success")
            } // End script
        } // End success
        cleanup {
            script {
                currentBuild.displayName = "#${env.BUILD_NUMBER}"
                currentBuild.description =  "[DEPLOYMENT ${currentBuild.currentResult}] ${WF_PROCESS_INSTANCE_ID}"
                deleteDir()
            }
        }// Clean workspace
     } // End post
} // End pipeline
